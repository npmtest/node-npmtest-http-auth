{"/home/travis/build/npmtest/node-npmtest-http-auth/test.js":"/* istanbul instrument in package npmtest_http_auth */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-http-auth/lib.npmtest_http_auth.js":"/* istanbul instrument in package npmtest_http_auth */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_http_auth = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_http_auth = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-http-auth/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-http-auth && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_http_auth */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_http_auth\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_http_auth.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_http_auth.rollup.js'] =\n            local.assetsDict['/assets.npmtest_http_auth.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_http_auth.__dirname + '/lib.npmtest_http_auth.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/http-auth.js":"\"use strict\";\n\n// Utils.\nconst utils = require('./auth/utils');\n\n// http integration.\nrequire('./server/http');\n\n// https integration.\nrequire('./server/https');\n\n// http-proxy integration.\nif (utils.isAvailable('http-proxy')) {\n    require('./server/proxy');\n}\n\n// Exports.\nmodule.exports = {\n    // Basic authentication.\n    basic: (options, checker) => {\n        return require('./auth/basic')(options, checker);\n    },\n\n    // Digest authentication.\n    digest: (options, checker) => {\n        return require('./auth/digest')(options, checker);\n    },\n\n    // Connect.\n    connect: (auth) => {\n        return require('./server/connect')(auth);\n    },\n\n    // Koa.\n    koa: (auth) => {\n        return require('./server/koa')(auth);\n    },\n\n    // Passport.\n    passport: (auth) => {\n        return require('./server/passport')(auth);\n    },\n\n    // Hapi.\n    hapi: () => {\n        return require('./server/hapi');\n    }\n};","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/auth/utils.js":"\"use strict\";\n\n// Importing crypto module.\nconst crypto = require('crypto');\nconst utils = {};\n\n// Generates md5 hash of input.\nutils.md5 = (input) => {\n    let hash = crypto.createHash('MD5');\n    hash.update(input);\n\n    return hash.digest('hex');\n};\n\n// Generates sha1 hash of input.\nutils.sha1 = (input) => {\n    let hash = crypto.createHash('sha1');\n    hash.update(input);\n\n    return hash.digest('base64');\n};\n\n// Encode to base64 string.\nutils.base64 = (input) => {\n    return new Buffer(input, 'utf8').toString('base64');\n};\n\n// Decodes base64 string.\nutils.decodeBase64 = (input) => {\n    return new Buffer(input, 'base64').toString('utf8');\n};\n\n// Check if module is available.\nutils.isAvailable = (path) => {\n    try {\n        return !!require.resolve(path);\n    } catch (err) {\n        return false;\n    }\n};\n\n// Export utils.\nmodule.exports = utils;","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/server/http.js":"\"use strict\";\n\n// HTTP module.\nconst http = require('http');\n\n// Base module.\nconst Base = require('../auth/base');\n\n// Backup old server creation.\nconst oldCreateServer = http.createServer;\n\n// Add authentication method.\nhttp.createServer = function() {\n    let server = undefined;\n\n    // Mutated mode.\n    if (arguments[0] instanceof Base) {\n        let auth = arguments[0];\n\n        // With listener.\n        if (arguments[1]) {\n            let listener = arguments[1];\n            let newListener = (req, res) => {\n                auth.check(req, res, (req, res, err) => {\n                    if (err) {\n                        console.error (err);\n                        res.statusCode = 400;\n                        res.end(err.message);\n                    } else {\n                        listener(req, res);\n                    }\n                });\n            };\n\n            // Mutate server.\n            server = oldCreateServer.apply(http, [newListener]);\n        } else {\n            // Without listener.\n            server = oldCreateServer.apply(http, []);\n            server.on('request', (req, res) => {\n                auth.check(req, res);\n            });\n        }\n    } else {\n        server = oldCreateServer.apply(http, arguments);\n    }\n\n    // Return server.\n    return server;\n};","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/auth/base.js":"\"use strict\";\n\n// File system module.\nconst fs = require('fs');\n\n// Event module.\nconst events = require('events');\n\n// Base authentication.\nclass Base extends events.EventEmitter {\n    // Constructor.\n    constructor(options, checker) {\n        super();\n\n        if (!options.msg401) {\n            options.msg401 = \"401 Unauthorized\";\n        }\n\n        if (!options.msg407) {\n            options.msg407 = \"407 Proxy authentication required\";\n        }\n\n        if (!options.contentType) {\n            options.contentType = \"text/plain\";\n        }\n\n        if (!options.realm) {\n            options.realm = \"users\";\n        }\n\n        // Assign values.\n        this.options = options;\n        this.checker = checker;\n\n        // Loading users from file, if file is set.\n        this.options.users = [];\n\n        if (!checker && options.file) {\n            this.loadUsers();\n        }\n    }\n\n    // Processing user line.\n    processLine(userLine) {\n        throw new Error('Not defined!');\n    }\n\n    // Parse auth header.\n    parseAuthorization(header) {\n        throw new Error('Not defined!');\n    }\n\n    // Find user.\n    findUser(req, clientOptions, callback) {\n        throw new Error('Not defined!');\n    }\n\n    // Generates header.\n    generateHeader(result) {\n        throw new Error('Not defined!');\n    }\n\n    // Ask for authentication.\n    ask(res, result) {\n        let header = this.generateHeader(result);\n        res.setHeader(\"Content-Type\", this.options.contentType);\n\n        if (this.proxy) {\n            res.setHeader(\"Proxy-Authenticate\", header);\n            res.writeHead(407);\n            res.end(this.options.msg407);\n        } else {\n            res.setHeader(\"WWW-Authenticate\", header);\n            res.writeHead(401);\n            res.end(this.options.msg401);\n        }\n    }\n\n    // Checking if user is authenticated.\n    check(req, res, callback) {\n        let self = this;\n        this.isAuthenticated(req, (result) => {\n            if (result instanceof Error) {\n                self.emit('error', result, req);\n\n                if (callback) {\n                    callback.apply(self, [req, res, result]);\n                }\n            } else if (!result.pass) {\n                self.emit('fail', result, req);\n                self.ask(res, result);\n            } else {\n                self.emit('success', result, req);\n\n                if (!this.options.skipUser) {\n                    req.user = result.user;\n                }\n\n                if (callback) {\n                    callback.apply(self, [req, res]);\n                }\n            }\n        });\n    }\n\n    // Is authenticated method.\n    isAuthenticated(req, callback) {\n        let self = this;\n        let header = undefined;\n        if (this.proxy) {\n            header = req.headers[\"proxy-authorization\"];\n        } else {\n            header = req.headers[\"authorization\"];\n        }\n\n        // Searching for user.\n        let searching = false;\n\n        // If header is sent.\n        if (header) {\n            let clientOptions = this.parseAuthorization(header);\n            if (clientOptions) {\n                searching = true;\n                this.findUser(req, clientOptions, (result) => {\n                    callback.apply(self, [result]);\n                });\n            }\n        }\n\n        // Only if not searching call callback.\n        if (!searching) {\n            callback.apply(this, [{}]);\n        }\n    }\n\n    // Loading files with user details.\n    loadUsers() {\n        let users = fs.readFileSync(this.options.file, 'UTF-8').replace(/\\r\\n/g, \"\\n\").split(\"\\n\");\n\n        // Process all users.\n        users.forEach(u => {\n            if(u && !u.match(/^\\s*#.*/)) {\n                this.processLine(u);\n            }\n        });\n    }\n}\n\n// Export base.\nmodule.exports = Base;","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/server/https.js":"\"use strict\";\n\n// HTTPS module.\nconst https = require('https');\n\n// Base module.\nconst Base = require('../auth/base');\n\n// Backup old server creation.\nlet oldCreateServer = https.createServer;\n\n// Mutate server.\nhttps.createServer = function() {\n    let server = undefined;\n\n    if (arguments[0] instanceof Base) {\n        let auth = arguments[0];\n\n        if (arguments[2]) {\n            let listener = arguments[2];\n            let newListener = (req, res) => {\n                auth.check(req, res, (req, res, err) => {\n                    if (err) {\n                        console.error(err);\n                        res.statusCode = 400;\n                        res.end(err.message);\n                    } else {\n                        listener(req, res);\n                    }\n                });\n            };\n\n            // HTTPS options and listener.\n            server = oldCreateServer.apply(https, [arguments[1], newListener]);\n        } else {\n            // Only HTTPS options.\n            server = oldCreateServer.apply(https, [arguments[1]]);\n            server.on('request', (req, res) => {\n                auth.check(req, res);\n            });\n        }\n    } else {\n        server = oldCreateServer.apply(https, arguments);\n    }\n\n    // Return server.\n    return server;\n};","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/auth/basic.js":"\"use strict\";\n\n// Base class.\nconst Base = require('./base');\n\n// Utility module.\nconst utils = require('./utils');\n\n// Importing apache-md5 module.\nconst md5 = require('apache-md5');\n\n// Importing apache-crypt module.\nconst crypt = require('apache-crypt');\n\n// Bcrypt.\nconst bcrypt = require('bcryptjs');\n\n// Crypto.\nconst crypto = require('crypto');\n\n// Define basic auth.\nclass Basic extends Base {\n    // Constructor.\n    constructor(options, checker) {\n        super(options, checker);\n    }\n\n    // Verifies if password is correct.\n    validate (hash, password) {\n        if (hash.substr(0, 5) === '{SHA}') {\n            hash = hash.substr(5);\n            return hash === utils.sha1(password);\n        } else if (hash.substr(0, 6) === '$apr1$' || hash.substr(0, 3) === '$1$') {\n            return hash === md5(password, hash);\n        } else if (hash.substr(0, 4) === '$2y$' || hash.substr(0, 4) === '$2a$') {\n            return bcrypt.compareSync(password, hash);\n        } else if (hash === crypt(password, hash)) {\n            return true;\n        } else if (hash.length === password.length) {\n            return crypto.timingSafeEqual ?\n                crypto.timingSafeEqual(new Buffer(hash), new Buffer(password)) : hash === password;\n        }\n    }\n\n    // Processes line from authentication file.\n    processLine (userLine) {\n        let lineSplit = userLine.split(\":\");\n        let username = lineSplit.shift();\n        let hash = lineSplit.join(\":\");\n\n        // Push user.\n        this.options.users.push({username: username, hash: hash});\n    }\n\n    // Generates request header.\n    generateHeader () {\n        return `Basic realm=\\\"${this.options.realm}\\\"`;\n    }\n\n    // Parsing authorization header.\n    parseAuthorization (header) {\n        let tokens = header.split(\" \");\n        if (tokens[0] === \"Basic\") {\n            return tokens[1];\n        }\n    }\n\n    // Searching for user.\n    findUser(req, hash, callback) {\n        // Decode base64.\n        let splitHash = utils.decodeBase64(hash).split(\":\");\n        let username = splitHash.shift();\n        let password = splitHash.join(\":\");\n\n        let self = this;\n\n        if (this.checker) {\n            // Custom auth.\n            this.checker.apply(this, [username, password, (result) => {\n                let params = undefined;\n\n                if (result instanceof Error) {\n                    params = [result]\n                } else {\n                    params = [{ user: username, pass: !!result }];\n                }\n\n                callback.apply(self, params);\n            }, req]);\n        } else {\n            // File based auth.\n            let pass = false;\n\n            // Loop users to find the matching one.\n            this.options.users.forEach(user => {\n                if (user.username === username && this.validate(user.hash, password)) {\n                    pass = true;\n                }\n            });\n\n            // Call final callback.\n            callback.apply(this, [{user: username, pass: pass}]);\n        }\n    }\n}\n\n// Export basic auth.\nmodule.exports = (options, checker) => {\n    return new Basic(options, checker);\n};","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/auth/digest.js":"\"use strict\";\n\n// Base class.\nconst Base = require('./base');\n\n// Utility module.\nconst utils = require('./utils');\n\n// Unique id.\nconst uuid = require('uuid');\n\n// Define digest auth.\nclass Digest extends Base {\n    // Constructor.\n    constructor(options, checker) {\n        super(options, checker);\n\n        // Array of random strings sent to clients.\n        this.nonces = [];\n\n        // Algorithm of encryption, could be MD5 or MD5-sess, default is MD5.\n        if ('MD5-sess' !== options.algorithm) {\n            this.options.algorithm = \"MD5\";\n        }\n\n        // Quality of protection is by default auth.\n        if (options.qop === 'none') {\n            this.options.qop = '';\n        } else {\n            this.options.qop = 'auth';\n        }\n    }\n\n    // Process user line.\n    processLine(line) {\n        let tokens = line.split(\":\");\n\n        // We need only users for given realm.\n        if (this.options.realm === tokens[1]) {\n            this.options.users.push({username: tokens[0], hash: tokens[2]});\n        }\n    }\n\n    // Parse authorization heder.\n    parseAuthorization(header) {\n        let opts = {};\n        let parts = header.split(' ');\n        let params = parts.slice(1).join(' ');\n\n        // Split the parameters by comma.\n        let tokens = params.split(/,(?=(?:[^\"]|\"[^\"]*\")*$)/);\n        if (parts[0].substr(0, 6) === \"Digest\") {\n            // Parse parameters.\n            let i = 0;\n            let len = tokens.length;\n\n            while (i < len) {\n                // Strip quotes and whitespace.\n                let param = /(\\w+)=[\"]?([^\"]*)[\"]?$/.exec(tokens[i]);\n                if (param) {\n                    opts[param[1]] = param[2];\n                }\n\n                ++i;\n            }\n\n        }\n\n        // Return options.\n        return opts;\n    }\n\n    // Validating hash.\n    validate(ha2, co, hash) {\n        let ha1 = hash;\n\n        // Algorithm.\n        if (co.algorithm === 'MD5-sess') {\n            ha1 = utils.md5(`${ha1}:${co.nonce}:${co.cnonce}`);\n        }\n\n        let response = undefined;\n\n        // Quality of protection.\n        if (co.qop) {\n            response = utils.md5(`${ha1}:${co.nonce}:${co.nc}:${co.cnonce}:${co.qop}:${ha2}`);\n        } else {\n            response = utils.md5(`${ha1}:${co.nonce}:${ha2}`);\n        }\n\n        // If calculated response is equal to client's response.\n        return response === co.response;\n    }\n\n    // Searching for user.\n    findUser(req, co, callback) {\n        let self = this;\n\n        if (this.validateNonce(co.nonce, co.qop, co.nc)) {\n            let ha2 = utils.md5(`${req.method}:${co.uri}`);\n            if (this.checker) {\n                // Custom authentication.\n                this.checker.apply(this, [co.username, (hash) => {\n                    let params = undefined;\n\n                    if (hash instanceof Error) {\n                        params = [hash];\n                    } else {\n                        params = [{user: co.username, pass: !!self.validate(ha2, co, hash)}];\n                    }\n\n                    // Call callback.\n                    callback.apply(this, params);\n                }, req]);\n            } else {\n                let pass = false;\n\n                // File based, loop users to find the matching one.\n                this.options.users.forEach(user => {\n                    if (user.username === co.username && this.validate(ha2, co, user.hash)) {\n                        pass = true;\n                    }\n                });\n\n                callback.apply(this, [{user: co.username, pass: pass}]);\n            }\n        } else {\n            callback.apply(this, [{stale: true}]);\n        }\n    }\n\n    // Remove nonces.\n    removeNonces(noncesToRemove) {\n        noncesToRemove.forEach(nonce => {\n            let index = this.nonces.indexOf(nonce);\n            if (index != -1) {\n                this.nonces.splice(index, 1);\n            }\n        });\n    }\n\n    // Validate nonce.\n    validateNonce(nonce, qop, nc) {\n        let found = false;\n\n        // Current time.\n        let now = Date.now();\n\n        // Nonces for removal.\n        let noncesToRemove = [];\n\n        // Searching for not expired ones.\n        this.nonces.forEach(serverNonce => {\n            if ((serverNonce[1] + 3600000) > now) {\n                if (serverNonce[0] === nonce) {\n                    if (qop) {\n                        if (nc > serverNonce[2]) {\n                            found = true;\n                            ++ serverNonce[2];\n                        }\n                    } else {\n                        found = true;\n                    }\n                }\n            } else {\n                noncesToRemove.push(serverNonce);\n            }\n        });\n\n        // Remove expired nonces.\n        this.removeNonces(noncesToRemove);\n\n        return found;\n    }\n\n    // Generates and returns new random nonce.\n    askNonce() {\n        let nonce = utils.md5(uuid());\n        this.nonces.push([nonce, Date.now(), 0]);\n\n        return nonce;\n    }\n\n    // Generates request header.\n    generateHeader(result) {\n        let nonce = this.askNonce();\n        let stale = result.stale ? true : false;\n\n        // Returning it.\n        return `Digest realm=\\\"${this.options.realm}\\\", qop=\\\"${this.options.qop}\\\", nonce=\\\"${nonce}\\\", algorithm=\\\"${this.options.algorithm}\\\", stale=\\\"${stale}\\\"`;\n    }\n}\n\n// Export digest auth.\nmodule.exports = (options, checker) => {\n    return new Digest(options, checker);\n};","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/server/connect.js":"\"use strict\";\n\n// Exporting connect integration.\nmodule.exports = (auth) => {\n    return (req, res, next) => {\n        auth.check(req, res, (req, res, err) => {\n            if (err) {\n                next(err);\n            } else {\n                next();\n            }\n        });\n    }\n};","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/server/hapi.js":"\"use strict\";\n\n// HTTP authentication scheme.\nconst httpScheme = (server, auth) => {\n    return {\n        authenticate: (request, reply) => {\n            // Is auth.\n            auth.isAuthenticated(request, (result) => {\n                if (result instanceof Error) {\n                    return reply(result, null, { credentials: null });\n                } else if (!result.pass) {\n                    let header = auth.generateHeader(result);\n                    return reply(auth.options.msg401).code(401).header('WWW-Authenticate', header);\n                } else {\n                    return reply.continue({credentials: { name: result.user }});\n                }\n            });\n\n        }\n    }\n};\n\n// Export plugin.\nexports.register = (plugin, options, next) => {\n    plugin.auth.scheme('http', httpScheme);\n    next();\n};\n\n// Export attributes.\nexports.register.attributes = {\n    pkg: require('../../package.json')\n};\n","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/server/koa.js":"\"use strict\";\n\n// Export middleware.\nmodule.exports = (auth) => {\n    // Middleware for koa.\n    const koa = (req, res, next) => {\n        auth.check(req, res, (req, res, err) => {\n            if (err) {\n                throw err;\n            } else {\n                next();\n            }\n        });\n    };\n\n    // Return middleware.\n    return function *(next) {\n        yield koa.bind(null, this.req, this.res);\n        yield next;\n    };\n};","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/server/passport.js":"\"use strict\";\n\n// Imports.\nconst passport  = require('passport');\nconst util = require('util');\n\n// Define strategy.\nfunction HttpStrategy(auth) {\n    this.name = 'http';\n    this.authentication = auth;\n\n    passport.Strategy.call(this);\n}\n\n// Inherit basic strategy.\nutil.inherits(HttpStrategy, passport.Strategy);\n\n// Define auth method.\nHttpStrategy.prototype.authenticate = function (req) {\n    let self = this;\n\n    // Is auth.\n    this.authentication.isAuthenticated(req, (result) => {\n        if (result instanceof Error) {\n            self.error(result);\n        } else if (!result.pass) {\n            let header = self.authentication.generateHeader(result);\n            self.fail(header);\n        } else {\n            self.success(result.user);\n        }\n    });\n};\n\n// Export.\nmodule.exports = (auth) => {\n    return new HttpStrategy(auth);\n};","/home/travis/build/npmtest/node-npmtest-http-auth/node_modules/http-auth/src/server/proxy.js":"\"use strict\";\n\n// Proxy module.\nconst httpProxy = require('http-proxy');\n\n// Base module.\nconst Base = require('../auth/base');\n\n// Backup old server creation.\nconst oldCreateServer = httpProxy.createServer;\n\n// New create server.\nconst newCreateServer = function(auth, options) {\n    // Mutated mode.\n    if (auth instanceof Base) {\n        // Set proxy flag.\n        auth.proxy = true;\n    } else {\n        // Set correct options.\n        options = auth;\n\n        // Clear authentication value.\n        auth = null;\n    }\n\n    // Default listener plus authentication check.\n    let server = oldCreateServer.apply(httpProxy, [options]);\n\n    // Authentication provided.\n    if (auth) {\n        // Override proxyRequest.\n        let oldProxyRequest = server.web;\n        server.web = function (req, res) {\n            // Fetch external arguments.\n            let externalArguments = arguments;\n\n            // Check for authentication.\n            auth.check(req, res, (req, res, err) => {\n                if (err) {\n                    console.error(err);\n                    res.statusCode = 400;\n                    res.end (err.message);\n                } else {\n                    oldProxyRequest.apply(server, externalArguments)\n                }\n            });\n        };\n    }\n\n    // Return server.\n    return server;\n};\n\n// Add authentication method.\nhttpProxy.createServer = httpProxy.createProxyServer = httpProxy.createProxy = newCreateServer;"}